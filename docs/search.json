[
  {
    "objectID": "template.html",
    "href": "template.html",
    "title": "JuliaCon Proceedings in Quarto",
    "section": "",
    "text": "This is a template for writing a JuliaCon Proceedings article in Quarto. This is a proof-of-concept for how we could use Quarto for JuliaCon proceedings. For current submissions, please ignore this repo and follow the official instructions here.\n\n\nQuarto makes it easy to write reproducible documents that can be rendered to PDF, HTML, Word and more. It is based on Markdown, which is easy to learn and write. It also supports LaTeX, which is useful for more advanced formatting. As this extension demonstrates, Quarto is also very flexible and can be extended with custom templates and styles.\n\n\n\nBy embracing Quarto, JuliaCon Proceedings can set an example for how to write reproducible documents. We would not only make it easier for authors to write their submissions but also open the door for more advanced features such as interactive figures and executable code blocks in HTML documents."
  },
  {
    "objectID": "template.html#what-is-quarto",
    "href": "template.html#what-is-quarto",
    "title": "JuliaCon Proceedings in Quarto",
    "section": "",
    "text": "Quarto makes it easy to write reproducible documents that can be rendered to PDF, HTML, Word and more. It is based on Markdown, which is easy to learn and write. It also supports LaTeX, which is useful for more advanced formatting. As this extension demonstrates, Quarto is also very flexible and can be extended with custom templates and styles."
  },
  {
    "objectID": "template.html#why-quarto",
    "href": "template.html#why-quarto",
    "title": "JuliaCon Proceedings in Quarto",
    "section": "",
    "text": "By embracing Quarto, JuliaCon Proceedings can set an example for how to write reproducible documents. We would not only make it easier for authors to write their submissions but also open the door for more advanced features such as interactive figures and executable code blocks in HTML documents."
  },
  {
    "objectID": "template.html#basic-usage",
    "href": "template.html#basic-usage",
    "title": "JuliaCon Proceedings in Quarto",
    "section": "2.1 Basic Usage",
    "text": "2.1 Basic Usage\nTo use the Quarto extension that provides this template, you can create a new project as follows:\nquarto use template pat-alt/quarto-juliacon-proceedings\nAlternatively, you can add the extension to an existing project:\nquarto add pat-alt/quarto-juliacon-proceedings\nThen, add the format to your document options:\nformat:\n  juliacon-proceedings-pdf: default"
  },
  {
    "objectID": "template.html#sec-executable-listings",
    "href": "template.html#sec-executable-listings",
    "title": "JuliaCon Proceedings in Quarto",
    "section": "3.1 Executable Listings (version \\(\\geq\\) 1.4.0)",
    "text": "3.1 Executable Listings (version \\(\\geq\\) 1.4.0)\nRelying on Quarto’s support for executable listings is the most flexible option as it allows us to use all of Quarto’s features. It comes with numerous advantages:\n\nWe can use the same code chunks for both PDF and HTML output (and more) with consistent formatting.\nUsing executable code ensures that things stay up-to-date and potential errors in the code are identified early: as you render your document, the code will be executed and the output will be inserted into the document.\nThe output of executable code can be cross-referenced. For example, we can reference a figure that is generated by a code chunk and the reference will be updated automatically when the figure number changes.\nCode chunks can also be hidden. In HTML, there is additional support for code folding.\nThe code itself can be cross-referenced.\n\nFrom the Quarto Docs:\n\nTo create cross-referenceable code listings from executable code blocks, use lst-label and lst-cap. — Quarto Docs\n\nFor example, the following code block will be labelled as lst-1 and calling @lst-1 will render as ?@lst-1. The figure it generates will be labelled as fig-1 and calling @fig-1 will render as Figure 1.\n\nusing Plots\n\nx = -3.0:0.01:3.0\ny = rand(length(x))\nplot(x, y)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: A figure caption.\n\n\n\n\n\n\n\n\n\nCurrent Limitations\n\n\n\n\nSupport for executable listings is only available in the latest version of Quarto (version \\(\\geq\\) 1.4.0).\nIt is currently not clear how to support custom formatting, for example through the existing jlcode.sty environment.\nCross-referencing listings does not seem to work in HTML output.\n\n\n\nAlternatively, we can use the existing lstlisting environment for Julia code using the julia language option. This is the same environment that is used for Julia code in the existing LaTeX template. Under the hood, this uses a lua filter to convert the code to LaTeX. The code creates Figure 2 which can be cross-referenced as @fig-2.\n\nusing Plots\n\nx = -3.0:0.01:3.0\ny = cumsum(rand(length(x)))\nplot(x, y)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: A figure caption.\n\n\n\n\n\n\n\n\n\nCurrent Limitations\n\n\n\nI don’t know how to cross-reference the code itself."
  },
  {
    "objectID": "template.html#static-listings",
    "href": "template.html#static-listings",
    "title": "JuliaCon Proceedings in Quarto",
    "section": "3.2 Static Listings",
    "text": "3.2 Static Listings\nThe special environment that is already defined for Julia code is still compatible with this template."
  },
  {
    "objectID": "template.html#markdown-tables",
    "href": "template.html#markdown-tables",
    "title": "JuliaCon Proceedings in Quarto",
    "section": "4.1 Markdown Tables",
    "text": "4.1 Markdown Tables\nMarkdown tables are rendered to LaTeX using the booktabs package. This is the recommended way to create tables because it is compatible with various output formats. Tables can be cross-referenced as @tbl-1 which renders as Table 1.\n\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table syntax {#tbl-1}\n\n\n\nTable 1: Demonstration of pipe table syntax\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\nCurrent Limitations\n\n\n\nThis seems to currently mess with executable listing (Section 3.1)."
  },
  {
    "objectID": "template.html#latex-tables",
    "href": "template.html#latex-tables",
    "title": "JuliaCon Proceedings in Quarto",
    "section": "4.2 LaTeX Tables",
    "text": "4.2 LaTeX Tables\nStandard LaTeX syntax can also be used to create tables. To use standard Quarto cross-referencing, the LaTeX syntax needs to be wrapped in a div with the tbl class. The table caption can be added as a paragraph. The following creates ?@tbl-2 which can be cross-referenced as @tbl-2.\n::: {#tbl-2}\n\n\\begin{tabular}{|l|l|}\\hline\nAge & Frequency \\\\ \\hline\n18--25  & 15 \\\\\n26--35  & 33 \\\\\n36--45  & 22 \\\\ \\hline\n\\end{tabular}\n\nThis is a table caption.\n\n:::\n\n\nThis is a table caption."
  }
]