---
title: Juliacon Proceedings in Quarto
format:
  juliacon-proceedings-pdf:
    keep-tex: true  
  juliacon-proceedings-html: default
author:
  - name: Patrick Altmeyer
    affiliations:
      - Delft University of Technology
    orcid: 0000-0003-4726-8613
    email: p.altmeyer@tudelft.nl
    url: https://www.paltmeyer.com/
  - name: Cynthia C. S. Liem
    affiliations:
      - Delft University of Technology
abstract: |
  This document is a Quarto template demonstrating the `juliacon-proceedings` format.
year: 2022
keywords: [Template, Demo, Quarto, JuliaCon]
bibliography: bibliography.bib  
---

# Introduction {#sec-intro}

*TODO* Create a template that demonstrates the appearance, formatting, layout, and functionality of your format. Learn more about journal formats at <https://quarto.org/docs/journals/>.

## Proof-of-Concept

This is a proof-of-concept for how we could use Quarto for JuliaCon proceedings. For current submissions, please ignore this repo and follow the official instructions [here](https://github.com/JuliaCon/JuliaConSubmission.jl).

## Executable Code

Ideally, we would be able to tab into Quarto's existing support for executable, cross-referenceable code chunks.

> To create cross-referenceable code listings from executable code blocks, use `lst-label` and `lst-cap`. 
> --- [Quarto Docs](https://quarto.org/docs/prerelease/1.4/crossref.html#cross-referenceable-listings-of-executable-code-blocks)

For example, the following code block will be labeled as `lst-1` and calling `@lst-1` will render as @lst-1. This ensures that things stay up-to-date and potential errors in the code are identified early: as you render your document, the code will be executed and the output will be inserted into the document.

```{julia}
#| lst-label: lst-1
#| lst-cap: A listing caption
#| eval: false
#| echo: true

using Plots

x = -3.0:0.01:3.0
y = rand(length(x))
plot(x, y)
```

Unfortunately, I don't know how to use the special environment that is already defined for Julia in this context.

## Code Listings

The special environment that is already defined for Julia code can still be used as before.

\begin{verbatim}
\begin{lstlisting}[
    language = Julia, 
    numbers=left, 
    label={lst:exmplg}, 
    caption={Example Code Block.}
]
using Plots

x = -3.0:0.01:3.0
y = rand(length(x))
plot(x, y)
\end{lstlisting}
\end{verbatim}
\begin{lstlisting}[
    language = Julia, 
    numbers=left, 
    label={lst:exmplg}, 
    caption={Example Code Block.}
]
using Plots

x = -3.0:0.01:3.0
y = rand(length(x))
plot(x, y)
\end{lstlisting}